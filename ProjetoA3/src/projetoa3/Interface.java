package projetoa3;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Usuário
 */
public class Interface extends javax.swing.JFrame {

    GerenciadorClientes gerenciador = new GerenciadorClientes(2);
    DefaultTableModel model;

    public Interface() {
        initComponents();

        model = (DefaultTableModel) tbl_tabela.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lbl_nome = new javax.swing.JLabel();
        lbl_sobrenome = new javax.swing.JLabel();
        lbl_cpf = new javax.swing.JLabel();
        lbl_datanasci = new javax.swing.JLabel();
        lbl_email = new javax.swing.JLabel();
        lbl_telefone = new javax.swing.JLabel();
        lbl_cep = new javax.swing.JLabel();
        txt_nome = new javax.swing.JTextField();
        txt_sobrenome = new javax.swing.JTextField();
        txt_cpf = new javax.swing.JTextField();
        txt_datanasci = new javax.swing.JTextField();
        txt_email = new javax.swing.JTextField();
        txt_telefone = new javax.swing.JTextField();
        txt_cep = new javax.swing.JTextField();
        btn_confirmar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_tabela = new javax.swing.JTable();
        btn_atualizar = new javax.swing.JButton();
        lbl_id = new javax.swing.JLabel();
        txt_id = new javax.swing.JTextField();
        btn_remover = new javax.swing.JButton();
        btn_procurar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel1.setText("Cadastro Clientes");

        lbl_nome.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lbl_nome.setText("Nome:");

        lbl_sobrenome.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lbl_sobrenome.setText("Sobrenome:");

        lbl_cpf.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lbl_cpf.setText("CPF:");

        lbl_datanasci.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lbl_datanasci.setText("Data de Nascimento:");

        lbl_email.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lbl_email.setText("Email:");

        lbl_telefone.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lbl_telefone.setText("Telefone:");

        lbl_cep.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lbl_cep.setText("CEP:");

        btn_confirmar.setText("Confirmar");
        btn_confirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_confirmarActionPerformed(evt);
            }
        });

        tbl_tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nome", "Sobrenome", "CPF", "Data de Nascimento", "Email", "Telefone", "CEP"
            }
        ));
        jScrollPane1.setViewportView(tbl_tabela);
        if (tbl_tabela.getColumnModel().getColumnCount() > 0) {
            tbl_tabela.getColumnModel().getColumn(0).setResizable(false);
            tbl_tabela.getColumnModel().getColumn(1).setResizable(false);
            tbl_tabela.getColumnModel().getColumn(2).setResizable(false);
            tbl_tabela.getColumnModel().getColumn(3).setResizable(false);
            tbl_tabela.getColumnModel().getColumn(4).setResizable(false);
            tbl_tabela.getColumnModel().getColumn(5).setResizable(false);
            tbl_tabela.getColumnModel().getColumn(6).setResizable(false);
            tbl_tabela.getColumnModel().getColumn(7).setResizable(false);
        }

        btn_atualizar.setText("Atualizar");
        btn_atualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_atualizarActionPerformed(evt);
            }
        });

        lbl_id.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lbl_id.setText("ID:");

        btn_remover.setText("Remover");
        btn_remover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_removerActionPerformed(evt);
            }
        });

        btn_procurar.setText("Procurar");
        btn_procurar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_procurarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lbl_cep)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txt_cep))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lbl_telefone)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txt_telefone))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lbl_email)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txt_email))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lbl_datanasci)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txt_datanasci))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lbl_cpf)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txt_cpf))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lbl_nome)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txt_nome, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lbl_sobrenome)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txt_sobrenome)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lbl_id)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txt_id))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(btn_remover)
                                                .addGap(18, 18, 18)
                                                .addComponent(btn_procurar))
                                            .addComponent(btn_atualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(122, 122, 122)))
                                .addGap(40, 40, 40))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(216, 216, 216)
                        .addComponent(btn_confirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_nome)
                    .addComponent(txt_nome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_sobrenome)
                    .addComponent(txt_sobrenome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_cpf)
                            .addComponent(txt_cpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_datanasci)
                            .addComponent(txt_datanasci, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_email)
                            .addComponent(txt_email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_id)
                            .addComponent(txt_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_procurar)
                            .addComponent(btn_remover))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_atualizar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_telefone)
                    .addComponent(txt_telefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_cep)
                    .addComponent(txt_cep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_confirmar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void removerTabela(int idCliente) {
        int numlinhas = model.getRowCount();
        boolean clienteEncontrado = false;

        for (int i = 0; i < numlinhas; i++) {
            int id = Integer.parseInt(model.getValueAt(i, 0).toString());

            if (id == idCliente) {
                model.removeRow(i);
                clienteEncontrado = true;
                JOptionPane.showMessageDialog(this, "Cliente removido com sucesso!");

                break;
            }
        }

        if (!clienteEncontrado) {
            JOptionPane.showMessageDialog(this, "O ID fornecido não condiz com nenhum cliente!");

            // Limpar os campos de texto
            txt_nome.setText("");
            txt_sobrenome.setText("");
            txt_cpf.setText("");
            txt_datanasci.setText("");
            txt_email.setText("");
            txt_telefone.setText("");
            txt_cep.setText("");
            txt_id.setText("");
        }
    }

    private void btn_removerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_removerActionPerformed

        int id = Integer.parseInt(txt_id.getText());
        gerenciador.removerCliente(id);

        int idCliente = Integer.valueOf(txt_id.getText());
        removerTabela(idCliente);

        // Limpar os campos de texto
        txt_nome.setText("");
        txt_sobrenome.setText("");
        txt_cpf.setText("");
        txt_datanasci.setText("");
        txt_email.setText("");
        txt_telefone.setText("");
        txt_cep.setText("");
        txt_id.setText("");

    }//GEN-LAST:event_btn_removerActionPerformed

    private void btn_confirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_confirmarActionPerformed

        String nome = txt_nome.getText();
        String sobrenome = txt_sobrenome.getText();
        String cpf = txt_cpf.getText().trim();
        String dataNascimento = txt_datanasci.getText();
        String email = txt_email.getText();
        String telefone = txt_telefone.getText();
        String cep = txt_cep.getText();

        if (nome.isEmpty() || sobrenome.isEmpty() || cpf.isEmpty() || dataNascimento.isEmpty()
                || email.isEmpty() || telefone.isEmpty() || cep.isEmpty()) {
            JOptionPane.showMessageDialog(this, "É preciso preencher todos os campos!");
        } else {
            Cliente cliente = new Cliente(nome, sobrenome, cpf, dataNascimento, email, telefone, cep);
            gerenciador.inserirCliente(cliente);

            model.insertRow(model.getRowCount(), new Object[]{cliente.getId(), nome, sobrenome, cpf, dataNascimento,
                email, telefone, cep});

            JOptionPane.showMessageDialog(this, "Cliente cadastrado com sucesso!");

            // Limpar os campos de texto
            txt_nome.setText("");
            txt_sobrenome.setText("");
            txt_cpf.setText("");
            txt_datanasci.setText("");
            txt_email.setText("");
            txt_telefone.setText("");
            txt_cep.setText("");
            txt_id.setText("");
        }

    }//GEN-LAST:event_btn_confirmarActionPerformed

    private void btn_procurarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_procurarActionPerformed

        int id = Integer.parseInt(txt_id.getText());
        Cliente cliente = gerenciador.buscarCliente(id);

        if (cliente != null) {
            String mensagem = "Informações do Cliente de ID: " + cliente.getId() + "\n"
                    + "Nome: " + cliente.getNome() + "\n"
                    + "Sobrenome: " + cliente.getSobrenome() + "\n"
                    + "CPF: " + cliente.getCpf() + "\n"
                    + "Data de Nascimento: " + cliente.getDatNasci() + "\n"
                    + "Email: " + cliente.getEmail() + "\n"
                    + "Telefone: " + cliente.getTelefone() + "\n"
                    + "CEP: " + cliente.getCep();

            JOptionPane.showMessageDialog(this, mensagem);

            // Limpar os campos de texto
            txt_nome.setText("");
            txt_sobrenome.setText("");
            txt_cpf.setText("");
            txt_datanasci.setText("");
            txt_email.setText("");
            txt_telefone.setText("");
            txt_cep.setText("");
            txt_id.setText("");

        } else {
            JOptionPane.showMessageDialog(this, "O ID fornecido não condiz com nenhum cliente!");

            // Limpar os campos de texto
            txt_nome.setText("");
            txt_sobrenome.setText("");
            txt_cpf.setText("");
            txt_datanasci.setText("");
            txt_email.setText("");
            txt_telefone.setText("");
            txt_cep.setText("");
            txt_id.setText("");
        }

    }//GEN-LAST:event_btn_procurarActionPerformed

    private void btn_atualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_atualizarActionPerformed

        int id = Integer.parseInt(txt_id.getText());
        int indexlinhas = -1;

        int numlinhas = model.getRowCount();
        for (int i = 0; i < numlinhas; i++) {
            int idCliente = Integer.parseInt(model.getValueAt(i, 0).toString());
            if (idCliente == id) {
                indexlinhas = i;
                break;
            }
        }

        if (indexlinhas != -1) {
            String nome = txt_nome.getText();
            String sobrenome = txt_sobrenome.getText();
            String cpf = txt_cpf.getText();
            String dataNascimento = txt_datanasci.getText();
            String email = txt_email.getText();
            String telefone = txt_telefone.getText();
            String cep = txt_cep.getText();

            if (!nome.isEmpty()) {
                gerenciador.atualizarAtributo(id, "nome", nome);
                model.setValueAt(nome, indexlinhas, 1); // Atualize o índice da coluna conforme necessário
            }

            if (!sobrenome.isEmpty()) {
                gerenciador.atualizarAtributo(id, "sobrenome", sobrenome);
                model.setValueAt(sobrenome, indexlinhas, 2); // Atualize o índice da coluna conforme necessário
            }

            if (!cpf.isEmpty()) {
                gerenciador.atualizarAtributo(id, "cpf", cpf);
                model.setValueAt(cpf, indexlinhas, 3); // Atualize o índice da coluna conforme necessário
            }

            if (!dataNascimento.isEmpty()) {
                gerenciador.atualizarAtributo(id, "data de nascimento", dataNascimento);
                model.setValueAt(dataNascimento, indexlinhas, 4); // Atualize o índice da coluna conforme necessário
            }

            if (!email.isEmpty()) {
                gerenciador.atualizarAtributo(id, "email", email);
                model.setValueAt(email, indexlinhas, 5); // Atualize o índice da coluna conforme necessário
            }

            if (!telefone.isEmpty()) {
                gerenciador.atualizarAtributo(id, "telefone", telefone);
                model.setValueAt(telefone, indexlinhas, 6); // Atualize o índice da coluna conforme necessário
            }

            if (!cep.isEmpty()) {
                gerenciador.atualizarAtributo(id, "cep", cep);
                model.setValueAt(cep, indexlinhas, 7); // Atualize o índice da coluna conforme necessário
            }

            JOptionPane.showMessageDialog(this, "Cliente atualizado com sucesso!");

            // Limpar os campos de texto
            txt_nome.setText("");
            txt_sobrenome.setText("");
            txt_cpf.setText("");
            txt_datanasci.setText("");
            txt_email.setText("");
            txt_telefone.setText("");
            txt_cep.setText("");
            txt_id.setText("");

        } else {
            JOptionPane.showMessageDialog(this, "O ID fornecido não condiz com nenhum cliente!");

            // Limpar os campos de texto
            txt_nome.setText("");
            txt_sobrenome.setText("");
            txt_cpf.setText("");
            txt_datanasci.setText("");
            txt_email.setText("");
            txt_telefone.setText("");
            txt_cep.setText("");
            txt_id.setText("");
        }
    }//GEN-LAST:event_btn_atualizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_atualizar;
    private javax.swing.JButton btn_confirmar;
    private javax.swing.JButton btn_procurar;
    private javax.swing.JButton btn_remover;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_cep;
    private javax.swing.JLabel lbl_cpf;
    private javax.swing.JLabel lbl_datanasci;
    private javax.swing.JLabel lbl_email;
    private javax.swing.JLabel lbl_id;
    private javax.swing.JLabel lbl_nome;
    private javax.swing.JLabel lbl_sobrenome;
    private javax.swing.JLabel lbl_telefone;
    private javax.swing.JTable tbl_tabela;
    private javax.swing.JTextField txt_cep;
    private javax.swing.JTextField txt_cpf;
    private javax.swing.JTextField txt_datanasci;
    private javax.swing.JTextField txt_email;
    private javax.swing.JTextField txt_id;
    private javax.swing.JTextField txt_nome;
    private javax.swing.JTextField txt_sobrenome;
    private javax.swing.JTextField txt_telefone;
    // End of variables declaration//GEN-END:variables
}
